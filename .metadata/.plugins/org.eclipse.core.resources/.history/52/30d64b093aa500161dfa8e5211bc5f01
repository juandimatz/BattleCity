package Visitantes;

import Obstaculos.*;
import Unidades.*;
import General.GameObject;
import Municion.*;
import PowerUps.*;
import TDALista.*;
import InteligenciaArtificial.*;
import Game.Juego;
import Nivel.*;

public class ColisionadorJugador extends Visitor 
{
	
	protected Jugador miJ;
	protected boolean vulnerable;
	
	public ColisionadorJugador(Jugador j) {
		miJ = j;
		vulnerable = false;
	}
	
	public void setVulnerable(boolean b) {
		vulnerable = b;
	}
	
	public boolean ColisionarParedLadrillo(ParedLadrillo p){
		
		return true;
	}
	
	public boolean ColisionarParedAcero(ParedAcero pa ){
		return true;
	}
	
	public boolean ColisionarArbol(Arbol a){
		return false;
	}
	
	public boolean ColisionarAgua(Agua a){
		return true;
	}
	
	public boolean ColisionarAguila(Aguila a){
		return true;
	}
	
	public boolean ColisionarBloqueo(Bloqueo b){
		return true;
	}
	
	public boolean ColisionarEstrella(Estrella e)
	{
		for(Position<GameObject> p: miJ.getJuego().getTodo().positions())
		{
			if (p.element()== e)
			{
				try 
				{
					miJ.getJuego().getTodo().remove(p);
				} catch (InvalidPositionException exc) {
					exc.getMessage();
				}
			}
		}
		miJ.getJuego().getGui().remove(e.getGrafico());		
		miJ.subirNivel();
		e.getIA().cambiarVariable();
		int puntajeViejo = miJ.getJuego().getPuntaje();
		miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje() + 500);
		int puntajeNuevo = miJ.getJuego().getPuntaje();
		if (puntajeViejo < 5000 && puntajeNuevo >= 5000)
		{
			miJ.setVida(miJ.getVida() + 1);
		}
		System.out.println("Puntaje: " + miJ.getJuego().getPuntaje());
		e = null;
		return false;
	}
	
	public boolean ColisionarCasco(Casco c)
	{
		for(Position<GameObject> p: miJ.getJuego().getTodo().positions())
		{
			if (p.element()== c)
			{
				try 
				{
					miJ.getJuego().getTodo().remove(p);
				} catch (InvalidPositionException exc) 
				{
					exc.getMessage();
				}
			}
		}
		Juego j = miJ.getJuego();
		Nivel n = miJ.getNivel();
		miJ.getJuego().getGui().remove(c.getGrafico());
		miJ.getJuego().getGui().remove(miJ.getGrafico());
		int puntajeViejo = miJ.getJuego().getPuntaje();
		miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje() + 500);
		int puntajeNuevo = miJ.getJuego().getPuntaje();
		if (puntajeViejo < 5000 && puntajeNuevo >= 5000)
		{
			miJ.setVida(miJ.getVida() + 1);
		}
		miJ = new JugadorInvulnerable(miJ.getGolpesResi(),miJ.getVelocidadMovimiento(), miJ.getVelocidadDisparo(), miJ.getPos().x, miJ.getPos().y, 4, miJ.getVida(), miJ.getDisparosSim());
		miJ.setJuego(j);
		miJ.getJuego().setJugador(miJ);
		miJ.setNivel(n);
		InteligenciaInvulnerable i = new InteligenciaInvulnerable (miJ.getJuego());
		i.start();
		System.out.println("Puntaje: " + miJ.getJuego().getPuntaje());
		c = null;
		return false;
	}
	
	public boolean ColisionarGranada(Granada g)
	{
		PositionList<Enemigo> lista = miJ.getJuego().getMalos();
		for (Enemigo e : lista) {
			miJ.getJuego().getGui().remove(e.getGrafico());
			miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje()+e.getPuntaje());
			for(Position<Enemigo> p: miJ.getJuego().getMalos().positions())
			{
				if (p.element()== e)
				{
					try 
					{
						miJ.getJuego().getMalos().remove(p);
					} catch (InvalidPositionException exc) {
						exc.getMessage();
					}
				}
			}
			for(Position<GameObject> p: miJ.getJuego().getTodo().positions()){
				if (p.element()== e)
					try {
						miJ.getJuego().getTodo().remove(p);
					} catch (InvalidPositionException exc) {
						exc.getMessage();
					}
			}
			
		}
		System.out.println("Puntaje: "+miJ.getJuego().getPuntaje());
		miJ.getJuego().getGui().remove(g.getGrafico());
		for(Position<GameObject> p: miJ.getJuego().getTodo().positions()){
			if (p.element()== g)
				try {
					miJ.getJuego().getTodo().remove(p);
				} catch (InvalidPositionException exc) {
					exc.getMessage();
				}
		}
		int puntajeViejo = miJ.getJuego().getPuntaje();
		miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje() + 500);
		int puntajeNuevo = miJ.getJuego().getPuntaje();
		if (puntajeViejo < 5000 && puntajeNuevo >= 5000)
		{
			miJ.setVida(miJ.getVida() + 1);
		}
		System.out.println("Puntaje: " + miJ.getJuego().getPuntaje());
		g = null;
		return false;
	}
	
	public boolean ColisionarPala(Pala pa)
	{
		for(Position<GameObject> p: miJ.getJuego().getTodo().positions())
		{
			if (p.element()== pa)
			{
				try 
				{
					miJ.getJuego().getTodo().remove(p);
				} catch (InvalidPositionException exc) {
					System.out.println(exc.getMessage());
				}
			}
		}
		miJ.getJuego().getGui().remove(pa.getGrafico());
		for (Obstaculo o : miJ.getJuego().getBase()) {
			for (Position<GameObject> g : miJ.getJuego().getTodo().positions()) 
			{
				if (g.element() == o) 
				{
					try 
					{
						miJ.getJuego().getTodo().remove(g);
					} catch (InvalidPositionException e) 
					{
						System.out.println(e.getMessage());
					}
					miJ.getJuego().getGui().remove(g.element().getGrafico());
				} 
			}
			for (Position<Obstaculo> g : miJ.getJuego().getObs().positions()) {
				if (g.element() == o) {
					try {
						miJ.getJuego().getObs().remove(g);
					} catch (InvalidPositionException e) {
						System.out.println(e.getMessage());
					}
				} 
			}
			o = new ParedAcero(4,o.getPos().x,o.getPos().y);
			miJ.getJuego().getTodo().addLast(o);
			miJ.getJuego().getObs().addLast(o);
			miJ.getJuego().getGui().add(o.getGrafico());
		}
		int puntajeViejo = miJ.getJuego().getPuntaje();
		miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje() + 500);
		int puntajeNuevo = miJ.getJuego().getPuntaje();
		if (puntajeViejo < 5000 && puntajeNuevo >= 5000)
		{
			miJ.setVida(miJ.getVida() + 1);
		}
		System.out.println("Puntaje: " + miJ.getJuego().getPuntaje());
		pa = null;
		return false;
	}
	
	public boolean ColisionarTanqueP(TanqueP t)
	{
		for(Position<GameObject> p: miJ.getJuego().getTodo().positions()){
			if (p.element()== t)
				try {
					miJ.getJuego().getTodo().remove(p);
				} catch (InvalidPositionException exc) {
					System.out.println(exc.getMessage());
				}
		}
		miJ.getJuego().getGui().remove(t.getGrafico());		
		miJ.setVida(miJ.getVida() + 1);
		System.out.println("Vidas actuales : " + miJ.getVida());
		t.getIA().cambiarVariable();
		int puntajeViejo = miJ.getJuego().getPuntaje();
		miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje() + 500);
		int puntajeNuevo = miJ.getJuego().getPuntaje();
		if (puntajeViejo < 5000 && puntajeNuevo >= 5000)
		{
			miJ.setVida(miJ.getVida() + 1);
		}
		System.out.println("Puntaje: " + miJ.getJuego().getPuntaje());
		t = null;
		return false;
	}
	
	public boolean ColisionarTimer(Timer t)
	{
		InteligenciaEnemigo iae= miJ.getJuego().getIAEnemigo();
		iae.interrumpir();
		for(Position<GameObject> p: miJ.getJuego().getTodo().positions()){
			if (p.element()== t)
				try {
					miJ.getJuego().getTodo().remove(p);
				} catch (InvalidPositionException exc) {
					System.out.println(exc.getMessage());
				}
		}
		miJ.getJuego().getGui().remove(t.getGrafico());	
		int puntajeViejo = miJ.getJuego().getPuntaje();
		miJ.getJuego().setPuntaje(miJ.getJuego().getPuntaje() + 500);
		int puntajeNuevo = miJ.getJuego().getPuntaje();
		if (puntajeViejo < 5000 && puntajeNuevo >= 5000)
		{
			miJ.setVida(miJ.getVida() + 1);
		}
		System.out.println("Puntaje: " + miJ.getJuego().getPuntaje());
		return false;
	}
	
	public boolean ColisionarTanqueEnemigo(Enemigo t){
		return true;
	}
	
	public boolean ColisionarTanqueJugador(Jugador j){
		return true;
	}
	
	public boolean ColisionarJugadorInvulnerable(JugadorInvulnerable j){
		return true;
	}
	
	public boolean ColisionarBalaJugador(BalaJugador t){
		return false;
	}
	
	public boolean ColisionarBalaEnemigo(BalaEnemigo t){
		return false;
	}
}